# -*- coding: utf-8 -*-
"""EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XeDP0la3k33j7rV7vATVp5-4vvU5GaKN
"""

#pip install -U kaleido
#pip install ONE-api ibllib

# Instanciate the ONE cache
from pathlib import Path
ibl_cache = Path.home() / 'Downloads' / 'IBL_Cache'
ibl_cache.mkdir(exist_ok=True, parents=True)

# Setup the ONE API
from one.api import ONE
ONE.setup()

from brainbox.io.one import SpikeSortingLoader, SessionLoader
from brainbox.ephys_plots import plot_brain_regions
from brainbox.task.trials import get_event_aligned_raster, get_psth
#from ibllib.atlas import AllenAtlas <-- deprecated
from iblatlas.atlas import AllenAtlas
import numpy as np
import pandas as pd
from brainbox.task.trials import find_trial_ids
import plotly.express as px


one = ONE(base_url='https://openalyx.internationalbrainlab.org', \
          password='international', silent=True, cache_dir=ibl_cache)

ba = AllenAtlas()

insertions = one.search_insertions(atlas_acronym='SCdg', query_type='remote')

pid = insertions[32]

[eid, pname] = one.pid2eid(pid)

ssl = SpikeSortingLoader(pid=pid, one=one, atlas=ba)
spikes, clusters, channels = ssl.load_spike_sorting()
clusters = ssl.merge_clusters(spikes, clusters, channels)

good_cluster_idx = clusters['label'] == 1
good_cluster_IDs = clusters['cluster_id'][good_cluster_idx]

clusters_g = {key: val[good_cluster_idx] for key, val in clusters.items()}
good_spk_indx = np.where(np.isin(spikes['clusters'], good_cluster_IDs))
spikes_g = {key: val[good_spk_indx] for key, val in spikes.items()}

sl = SessionLoader(eid=eid, one=one)
sl.load_trials()
events = sl.trials['firstMovement_times']

nan_index = np.where(np.isnan(events))[0]
events = events.drop(index=nan_index).to_numpy()
choice = sl.trials.choice.drop(index=nan_index).to_numpy()

good_cluster_df = pd.DataFrame(clusters_g)
SCdg_df = good_cluster_df[good_cluster_df['acronym'] == 'SCdg']
SCiw_df = good_cluster_df[good_cluster_df['acronym'] == 'SCiw']

order = 'trial num'
trial_idx, dividers = find_trial_ids(sl.trials, sort='choice', order=order)

selected_cluster_id = SCdg_df['cluster_id'].iloc[0]
spikes_idx = spikes['clusters'] == selected_cluster_id

pre_time = -0.5
post_time = 3
raster_bin = 0.07

import os

if not os.path.exists("images"):
    os.mkdir("images")

"""## SCDG"""

aligned_spikes = []
for t in trial_idx:
    # Ensure the index 't' is within the valid range of 'events'
    if 0 <= t < len(events):
        trial_spikes = spikes['times'][(spikes['times'] >= events[t] + pre_time) & (spikes['times'] <= events[t] + post_time)]
        aligned_spikes.extend([(spike - events[t], t) for spike in trial_spikes])
    else:
        continue

raster_df = pd.DataFrame(aligned_spikes, columns=["Time (s)", "Trial"])

raster_fig = px.scatter(
    raster_df,
    x="Time (s)",
    y="Trial",
    title=f"Raster Plot for Cluster {selected_cluster_id}, SCdg",
    labels={"Time (s)": "Time from Event (s)", "Trial": "Trial Number"},
    color_discrete_sequence=["black"],
    opacity=0.2,
    width=1080,
    height=800
)

raster_fig.update_traces(marker=dict(size=0.75)) # Adjust marker size
raster_fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGray') # Customize x-axis grid
raster_fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGray') # Customize y-axis grid
raster_fig.update_layout(plot_bgcolor='white')  # Set plot background color to white
raster_fig.show()

raster_fig.write_image(f"images/Raster Plot for Cluster {selected_cluster_id}, SCdg.png")

hist_fig = px.histogram(raster_df, x="Time (s)", nbins=1000, title= f"Spike Time Histogram for Cluster {selected_cluster_id}, SCdg",color_discrete_sequence=["grey"])
hist_fig.update_layout(xaxis_title="Time from Event (s)", yaxis_title="Spike Count")
hist_fig.show()
hist_fig.write_image(f"images/Spike Histogram for Cluster {selected_cluster_id}, SCdg.png")

pre_time = -0.5
post_time = 3
selected_cluster_id = SCdg_df['cluster_id'].iloc[0]
spikes_idx = spikes['clusters'] == selected_cluster_id

# Separate trials by choice (-1: left, 1: right)
left_trials = np.where(choice == -1)[0]
right_trials = np.where(choice == 1)[0]

# Prepare raster data for left trials
aligned_spikes_left = []
for t in left_trials:
    trial_spikes = spikes['times'][(spikes['times'] >= events[t] + pre_time) & (spikes['times'] <= events[t] + post_time) & spikes_idx]
    aligned_spikes_left.extend([(spike - events[t], t) for spike in trial_spikes])

raster_df_left = pd.DataFrame(aligned_spikes_left, columns=["Time (s)", "Trial"])

# Prepare raster data for right trials
aligned_spikes_right = []
for t in right_trials:
    trial_spikes = spikes['times'][(spikes['times'] >= events[t] + pre_time) & (spikes['times'] <= events[t] + post_time) & spikes_idx]
    aligned_spikes_right.extend([(spike - events[t], t) for spike in trial_spikes])

raster_df_right = pd.DataFrame(aligned_spikes_right, columns=["Time (s)", "Trial"])

# Plot raster for left trials
raster_fig_left = px.scatter(
    raster_df_left,
    x="Time (s)",
    y="Trial",
    title=f"Raster Plot for Left Trials (Cluster {selected_cluster_id}), SCdg",
    labels={"Time (s)": "Time from Event (s)", "Trial": "Trial Number"},
    color_discrete_sequence=["blue"],
    opacity=0.4,
    width=800,
    height=600
)
raster_fig_left.update_traces(marker=dict(size=3))  # Adjust marker size
raster_fig_left.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
raster_fig_left.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
raster_fig_left.update_layout(plot_bgcolor='white')
raster_fig_left.show()

title=f"Raster Plot for Left Trials (Cluster {selected_cluster_id}), SCdg"
raster_fig_left.write_image(f"images/{title}.png")

# Plot raster for right trials
raster_fig_right = px.scatter(
    raster_df_right,
    x="Time (s)",
    y="Trial",
    title=f"Raster Plot for Right Trials (Cluster {selected_cluster_id}), SCdg",
    labels={"Time (s)": "Time from Event (s)", "Trial": "Trial Number"},
    color_discrete_sequence=["red"],
    opacity=0.4,
    width=800,
    height=600
)
raster_fig_right.update_traces(marker=dict(size=3))  # Adjust marker size
raster_fig_right.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
raster_fig_right.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
raster_fig_right.update_layout(plot_bgcolor='white')
raster_fig_right.show()

title=f"Raster Plot for Right Trials (Cluster {selected_cluster_id}), SCdg"
raster_fig_right.write_image(f"images/{title}.png")

# Bin size and time alignment
bin_size = 0.05
time_bins = np.arange(pre_time, post_time, bin_size)

# Histogram data for left trials
spike_times_left = [
    spike - events[t]
    for t in left_trials
    for spike in spikes['times'][(spikes['times'] >= events[t] + pre_time) & (spikes['times'] <= events[t] + post_time) & spikes_idx]
]
psth_counts_left, _ = np.histogram(spike_times_left, bins=time_bins)

psth_df_left = pd.DataFrame({
    "Time (s)": time_bins[:-1],
    "Spike Count": psth_counts_left
})

# Histogram data for right trials
spike_times_right = [
    spike - events[t]
    for t in right_trials
    for spike in spikes['times'][(spikes['times'] >= events[t] + pre_time) & (spikes['times'] <= events[t] + post_time) & spikes_idx]
]
psth_counts_right, _ = np.histogram(spike_times_right, bins=time_bins)

psth_df_right = pd.DataFrame({
    "Time (s)": time_bins[:-1],
    "Spike Count": psth_counts_right
})

# Plot histogram for left trials
hist_fig_left = px.bar(
    psth_df_left,
    x="Time (s)",
    y="Spike Count",
    title=f"Spike Histogram for Left Trials (Cluster {selected_cluster_id}), SCdg",
    labels={"Time (s)": "Time from Event (s)", "Spike Count": "Spike Count"},
    color_discrete_sequence=["blue"],
    width=800,
    height=600
)
hist_fig_left.update_xaxes(showgrid=True, gridcolor='LightGray')
hist_fig_left.update_yaxes(showgrid=True, gridcolor='LightGray')
hist_fig_left.update_layout(plot_bgcolor='white')
hist_fig_left.show()

title=f"Spike Histogram for Left Trials (Cluster {selected_cluster_id}), SCdg"
hist_fig_left.write_image(f"images/{title}.png")


# Plot histogram for right trials
hist_fig_right = px.bar(
    psth_df_right,
    x="Time (s)",
    y="Spike Count",
    title=f"Spike Histogram for Right Trials (Cluster {selected_cluster_id}), SCdg",
    labels={"Time (s)": "Time from Event (s)", "Spike Count": "Spike Count"},
    color_discrete_sequence=["red"],
    width=800,
    height=600
)
hist_fig_right.update_xaxes(showgrid=True, gridcolor='LightGray')
hist_fig_right.update_yaxes(showgrid=True, gridcolor='LightGray')
hist_fig_right.update_layout(plot_bgcolor='white')
hist_fig_right.show()

title=f"Spike Histogram for Right Trials (Cluster {selected_cluster_id}), SCdg"
hist_fig_right.write_image(f"images/{title}.png")

"""## SCIW"""

selected_cluster_id = SCiw_df['cluster_id'].iloc[0]
spikes_idx = spikes['clusters'] == selected_cluster_id

# Prepare raster data for SCiw
aligned_spikes_sciw = []
for t in trial_idx:
    # Check if t is a valid index for events
    if 0 <= t < len(events):  # Ensure t is within the valid range
        trial_spikes = spikes['times'][(spikes['times'] >= events[t] + pre_time) & (spikes['times'] <= events[t] + post_time) & spikes_idx]
        aligned_spikes_sciw.extend([(spike - events[t], t) for spike in trial_spikes])
    else:
        continue

raster_df_sciw = pd.DataFrame(aligned_spikes_sciw, columns=["Time (s)", "Trial"])

# Plot raster for SCiw
raster_fig_sciw = px.scatter(
    raster_df_sciw,
    x="Time (s)",
    y="Trial",
    title=f"Raster Plot for Cluster {selected_cluster_id}, SCiw",
    labels={"Time (s)": "Time from Event (s)", "Trial": "Trial Number"},
    color_discrete_sequence=["purple"],  # Set marker color to purple
    opacity=0.4,
    width=800,
    height=600
)
raster_fig_sciw.update_traces(marker=dict(size=3))  # Adjust marker size
raster_fig_sciw.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
raster_fig_sciw.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
raster_fig_sciw.update_layout(plot_bgcolor='white')
raster_fig_sciw.show()

raster_fig_sciw.write_image(f"images/Raster Plot for Cluster {selected_cluster_id}, SCiw.png")

# Prepare histogram data for SCiw
spike_times_sciw = [
    spike - events[t]
    for t in trial_idx
    if 0 <= t < len(events) # Check if trial index is within bounds of events
    for spike in spikes['times'][(spikes['times'] >= events[t] + pre_time) & (spikes['times'] <= events[t] + post_time) & spikes_idx]
]
psth_counts_sciw, _ = np.histogram(spike_times_sciw, bins=time_bins)

psth_df_sciw = pd.DataFrame({
    "Time (s)": time_bins[:-1],
    "Spike Count": psth_counts_sciw
})

# Plot histogram for SCiw
hist_fig_sciw = px.bar(
    psth_df_sciw,
    x="Time (s)",
    y="Spike Count",
    title=f"Spike Histogram (Cluster {selected_cluster_id}), SCiw",
    labels={"Time (s)": "Time from Event (s)", "Spike Count": "Spike Count"},
    width=800,
    height=600,
    color_discrete_sequence=["purple"]  # Set the color to purple
)
hist_fig_sciw.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
hist_fig_sciw.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
hist_fig_sciw.update_layout(plot_bgcolor='white', bargap=0.1)
hist_fig_sciw.show()

hist_fig_sciw.write_image(f"images/Spike Histogram for Cluster {selected_cluster_id}, SCiw.png")

# Prepare raster data for left trials (SCiw)
aligned_spikes_left_sciw = []
for t in left_trials:
    trial_spikes = spikes['times'][(spikes['times'] >= events[t] + pre_time) & (spikes['times'] <= events[t] + post_time) & spikes_idx]
    aligned_spikes_left_sciw.extend([(spike - events[t], t) for spike in trial_spikes])

raster_df_left_sciw = pd.DataFrame(aligned_spikes_left_sciw, columns=["Time (s)", "Trial"])

# Raster plot for left trials (SCiw)
raster_fig_left_sciw = px.scatter(
    raster_df_left_sciw,
    x="Time (s)",
    y="Trial",
    title=f"Raster Plot for Left Trials (Cluster {selected_cluster_id}), SCiw",
    labels={"Time (s)": "Time from Event (s)", "Trial": "Trial Number"},
    color_discrete_sequence=["blue"],  # Blue for left trials
    opacity=0.4,
    width=800,
    height=600
)
raster_fig_left_sciw.update_traces(marker=dict(size=3))
raster_fig_left_sciw.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
raster_fig_left_sciw.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
raster_fig_left_sciw.update_layout(plot_bgcolor='white')
raster_fig_left_sciw.show()

title=f"Raster Plot for Left Trials (Cluster {selected_cluster_id}), SCiw"
raster_fig_left_sciw.write_image(f"images/{title}.png")

# Prepare histogram data for left trials (SCiw)
spike_times_left_sciw = [
    spike - events[t]
    for t in left_trials
    for spike in spikes['times'][(spikes['times'] >= events[t] + pre_time) & (spikes['times'] <= events[t] + post_time) & spikes_idx]
]
psth_counts_left_sciw, _ = np.histogram(spike_times_left_sciw, bins=time_bins)

psth_df_left_sciw = pd.DataFrame({
    "Time (s)": time_bins[:-1],
    "Spike Count": psth_counts_left_sciw
})

# Histogram for left trials (SCiw)
hist_fig_left_sciw = px.bar(
    psth_df_left_sciw,
    x="Time (s)",
    y="Spike Count",
    title=f"Spike Histogram for Left Trials (Cluster {selected_cluster_id}), SCiw",
    labels={"Time (s)": "Time from Event (s)", "Spike Count": "Spike Count"},
    width=800,
    height=600,
    color_discrete_sequence=["blue"]  # Blue for left trials
)
hist_fig_left_sciw.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
hist_fig_left_sciw.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
hist_fig_left_sciw.update_layout(plot_bgcolor='white', bargap=0.1)
hist_fig_left_sciw.show()

title=f"Spike Histogram for Left Trials (Cluster {selected_cluster_id}), SCiw"
hist_fig_left_sciw.write_image(f"images/{title}.png")

# Prepare raster data for right trials (SCiw)
aligned_spikes_right_sciw = []
for t in right_trials:
    trial_spikes = spikes['times'][(spikes['times'] >= events[t] + pre_time) & (spikes['times'] <= events[t] + post_time) & spikes_idx]
    aligned_spikes_right_sciw.extend([(spike - events[t], t) for spike in trial_spikes])

raster_df_right_sciw = pd.DataFrame(aligned_spikes_right_sciw, columns=["Time (s)", "Trial"])

# Raster plot for right trials (SCiw)
raster_fig_right_sciw = px.scatter(
    raster_df_right_sciw,
    x="Time (s)",
    y="Trial",
    title=f"Raster Plot for Right Trials (Cluster {selected_cluster_id}), SCiw",
    labels={"Time (s)": "Time from Event (s)", "Trial": "Trial Number"},
    color_discrete_sequence=["red"],  # Red for right trials
    opacity=0.4,
    width=800,
    height=600
)
raster_fig_right_sciw.update_traces(marker=dict(size=3))
raster_fig_right_sciw.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
raster_fig_right_sciw.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
raster_fig_right_sciw.update_layout(plot_bgcolor='white')
raster_fig_right_sciw.show()

title=f"Raster Plot for Right Trials (Cluster {selected_cluster_id}, SCiw)"
raster_fig_right_sciw.write_image(f"images/{title}.png")

# Prepare histogram data for right trials (SCiw)
spike_times_right_sciw = [
    spike - events[t]
    for t in right_trials
    for spike in spikes['times'][(spikes['times'] >= events[t] + pre_time) & (spikes['times'] <= events[t] + post_time) & spikes_idx]
]
psth_counts_right_sciw, _ = np.histogram(spike_times_right_sciw, bins=time_bins)

psth_df_right_sciw = pd.DataFrame({
    "Time (s)": time_bins[:-1],
    "Spike Count": psth_counts_right_sciw
})

# Histogram for right trials (SCiw)
hist_fig_right_sciw = px.bar(
    psth_df_right_sciw,
    x="Time (s)",
    y="Spike Count",
    title=f"Spike Histogram for Right Trials (Cluster {selected_cluster_id}), SCiw",
    labels={"Time (s)": "Time from Event (s)", "Spike Count": "Spike Count"},
    width=800,
    height=600,
    color_discrete_sequence=["red"]  # Red for right trials
)
hist_fig_right_sciw.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
hist_fig_right_sciw.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGray')
hist_fig_right_sciw.update_layout(plot_bgcolor='white', bargap=0.1)
hist_fig_right_sciw.show()

hist_fig_right_sciw.write_image(f"images/Spike Histogram for Right Trials Cluster {selected_cluster_id}, SCiw.png")